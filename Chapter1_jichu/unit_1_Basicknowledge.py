#########################第一单元 注释 #######################################

# 1.1 单行注释: 在一行内容前面加 # 会注释掉该内容

#print('注释掉这一行')

# 1.2 多行注释: 三个引号开始，三个引号结束（单引号和双引号都可以），不能嵌套

'''
print('多行注释')
'''

# import keyword

# print('''
# 这不是注释
# ''')

########################## 1.2 变量 ############################################

# 1.2.1 什么是变量：给一个标签赋予一个值，以便程序可以引用

# 1.2.2 变量的创建
'''
创建 变量名 = 值 （不需要声明，但是必须要赋值）

vat1 = 1
var2 = 2
var3 = var+var2
var4,var5,var6 = 4,5,6

'''


# 1.2.3 标识符号
'''
标识符号 ： 程序可以自己命名的地方

标识符命名规则：
只能包含字母、数字、下划线，不能用数字开头
区分大小写
不要用关键字（print(keyword.kwlist) 可以输出关键字）
'''
# print(keyword.kwlist)

# 1.2.4 常量
'''
不能被修改的值为常量，一般用全部大写来表示。python没有内置的常量类型
PI = 3.1415926
'''

###################### 1.3 进制以及源码、反码和补码 #############################

# 1.3.1 进制
"""
计算机只有二进制，所有的存储和运算都要转为二进制，声音、文字、视频等等
二进制：0、1
八进制：0-7
十进制：0-9
十六进制：0-9以及A-F，标识10、11、12、13、14、15
"""

#1.3.2 不同进制标识整数
"""
二进制：0B或者0b开头
八进制：0o开头
十进制：正常数字
十六进制：0x以及0X开头，此处的A_F不区分大小写
"""

#1.3.3 原码、反码、补码
"""
计算机存储数据使用二进制数字，但是存储一个数字时候并不是直接存储对应的二进制数字，而是存储该数据对应二进制数字的
补码
机器数：一个数在计算机存储的形式是二进制数，称为机器数。机器数是有符号的，用机器数最高一位表示。0是正，1是负。
真值：因为机器数有符号位，所以机器数的形式值不代表他真是的值。比如 机器数10000001，真实的值是-1，但是形式值129，
因此将带符号的机器数的真正标识的值称为真值。
"""



###################### 1.4 基本数据类型 #############################

#1.4.1 数据类型
"""
1、数值 int、float、bool、complex
2、字符串 str
3、列表list、元组tuple、集合set、字典dist
4、特殊类型 None 标识空值或者缺失值，用户 函数咩有返回或者变量没有被赋予值
其中 int、float、comple、bool、都是属于Number 数据类型
不可变 number、string、tuple
可变 list、dictionary、set
a = 10
判断类型 type() :print(type(a))
"""

#1.4.2 float浮点型

"""
python 将所有带小数点的数都称为浮点数，要注意的是使用浮点数进行计算是可能存在微小误差 可以导入 decimal 解决
 
 a = 1.0
 b = 2.0
 
print(a+b) = 3.0000000000003

from decimal import Decimal

c = Decimal('1.0')
d = Decimal('2.0')

print(a+b) = 3.0000000000003

"""

#2、字符串
"""
字符串 就是一些列字符，用引号引起来的都是字符串可以是单引号或者双引号，可以用反斜杠转译特殊字符

str1 = 'this is a string'
str2 = "this is a string"
str3 = "this is a 'stirng'"
str4 = 'this is a "stirng"'

也可以使用三引号标识多行

str5 = '''
hello word,
fffffff
'''
print(str5)

"""

# 1.4.3 数据类型转换

"""
1、对于两种不同类型的数据进行运算，娇小的数据类型（整数）就会转换成较大的浮点数，以免数据丢失
注意:两个整型的数据相除，结果也是浮点型
2、整型和字段串相加会报错，无法进行隐式转换
3、使用函数进行强制转换

int()
float()
str()
....

"""

# 1.4.4 字符的编码和解码
"""
1、将字符串数据类型转换为字节型数据的过程称为编码，需要指定编码类型,默认是utf-8,encode
2、将字节类型的数据转换成字符穿的过程叫做解码，decode
2、在进行编码集使用时，一定注意，使用什么编码就需要使用他解码

str1 = '你好中国'
byte1 = str1.encode(encoding='gbk')
print(byte1)
print(type(byte1))

byte2 = byte1.decode(encoding='gbk')
print(byte2)

"""



###################### 1.5 输入和输出 #############################

# 1.5.1 输入

"""
1、如果用户在键盘上输入一些字符，python 提供了了个 input() 函数，可以让用户输入字符串，并存放在一个变量里面,按回车结束
语法 变量  = input('提示信息')
aa = input('请输入：')
print(type(aa))
"""
# 1.5.2 输出
'''
1、使用 print() 打印输出
print('sss')
print('aa','aaaa')

2、可以使用 end = 来控制print() 以什么结尾,默认是换行符
print('aaa',end='\n')

'''


###################### 1.6 占位符 #############################

#1、字符串前加一个f，字符串中的 {}    内写入变量名
"""
int1 = 10
float1 = 10.9
str3 = f"i = {int1},f = {float1}"
"""
#2、{} 内变量后可以加上 = ，打印的时候会出现在变量值前
'''
int1 = 10
float1 = 3.14159
str3 = f"{int1 = }, {float1 = }"
'''
#3、{} 外面再套一层{},会导致转译
'''
int1 = 10
float1 = 3.14159
str3 = f"{{int1 = }}, {{float1 = }}"
'''
#3、数据格式化
"""
float1 = 31415.9
str2 = "{:*^20,.2f}".format(float1)
print(str2)

: 后添加多个参数进行格式化
^ 可以< ^ > 分别对应左对齐、居中、右对齐
20 数据宽度是20，数据长度不足20进行填充
，可选 ，和 _ ，每三位进行分割
.2f 小数点保留后两位
"""



###################### 1.7 运算符 #############################

#1.7.1 算术运算符
"""
+ - * /
//  整除，除后向下取整
%   模，返回除法余数
**  幂

"""

# 1.7.2 赋值运算符
"""
= 
+=  : a+=2 等同于 a = a + 2
-=
*=
/=
//=
**=
:=  海象运算符，在表达式中同时进行赋值和返回赋值的

num1 = 20
print((num2 := 2*3)>num1)
print(num2)

"""


# 1.7.3 比较运算赋

"""
==
!=
<
>
>=
<=
注意 不同的数据类型不能比较
如果是字符串比较，是从最左边开始逐个比较相应位置的字符的 ASCLL 码
"""

#1.7.4 逻辑运算符
"""
and 与 x and y ,若 x 为 False 返回 x 的值，否则返回 y 的值
or 或 x or y ，若 X 为Ture 返回 x 的值，否则返回 Y 的值
not 非 not X 若 X 为 True 返回 False，若X 为False返回True

b1 = False
b2 = True
print(not(b1))
print(5 and 8) #非0 标识False，0表示 True
"""

#1.7.5 成员运算符

"""
in 在指定的值中找到值返回true，否则返回 false
not int 在指定的序列中找到值返回true，否则返回false

a in ['c','s','a']

"""

#1.7.8 身份运算符

"""
is 判断两个标识符是不是引用自相同对象  a is b  类似与 id(a) == id(b),如果引用相同对象，就返回true.
not is 
"""


###################### 1.7 代码规范 #############################

















